<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:int-file="http://www.springframework.org/schema/integration/file"
	xmlns:int-jpa="http://www.springframework.org/schema/integration/jpa"
	xmlns:tx="http://www.springframework.org/schema/tx"
	
	xsi:schemaLocation="
		http://www.springframework.org/schema/integration         http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/beans               http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/integration/file    http://www.springframework.org/schema/integration/file/spring-integration-file.xsd
		http://www.springframework.org/schema/integration/jpa     http://www.springframework.org/schema/integration/jpa/spring-integration-jpa.xsd
		http://www.springframework.org/schema/context             http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx				  http://www.springframework.org/schema/tx/spring-tx.xsd		
		">

	<context:component-scan base-package="gov.usgs.cida.ncetl" />
	<context:property-placeholder/>
	<context:annotation-config/>
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- <bean id="em" class="org.springframework.orm.jpa.LocalEntityManagerFactoryBean">
      <property name="persistenceUnitName" value="ncETL"/>
      <property name=""
    </bean> -->
    
    <bean id="emf" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
  		<property name="dataSource" ref="dataSource"/>
  		<property name="jpaVendorAdapter">
        	<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
            	<property name="showSql" value="true"/>
            	<property name="generateDdl" value="false"/>
            	<property name="databasePlatform" value="org.hibernate.dialect.MySQL5Dialect"/>
        	</bean>
    	</property>
	</bean>
	
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
   		<property name="entityManagerFactory" ref="emf" />
	</bean>
	
	<bean id="persistenceExceptionTranslationPostProcessor"
      class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
	
	<bean id="etlHistoryManager" class="gov.usgs.cida.ncetl.jpa.EtlHistoryManager"/>
	
	<import resource="jdbc-context.xml"/>
	
	<!-- Liquibase to upgrade the database; runs automatically on context init -->
	<bean id="liquibase" class="liquibase.integration.spring.SpringLiquibase">
     	<property name="dataSource" ref="dataSource" />
     	<property name="changeLog" value="liquibase/changelog.xml" />
 	</bean>
 	
 	<bean id="oneshot" class="gov.usgs.cida.ncetl.sis.LatchTrigger" scope="prototype">
      <property name="go" value="true"/>
    </bean>
 	
 	<!-- Here beginneth the actual process flows -->
	<int-jpa:inbound-channel-adapter id="config-fetcher" channel="config-list-chan"
		entity-manager-factory="emf"
		jpa-query="select s from ArchiveConfig s where s.active = TRUE "
		expect-single-result="false"
		delete-after-poll="false"
		auto-startup="false"
		>
			<int:poller trigger="oneshot">
					<int:transactional propagation="REQUIRED" transaction-manager="transactionManager"/>
			</int:poller>
	</int-jpa:inbound-channel-adapter>
	
	<int:channel id="config-list-chan">
		<!-- List<ArchiveConfig> -->
	</int:channel>
	
	<int:splitter input-channel="config-list-chan" output-channel="config-chan"/>
	
	<int:channel id="config-chan"/>
	
	<int:header-enricher input-channel="config-chan" output-channel="work-chan">
		<int:header name="config" expression="payload"/>
		<int:header name="rfc" expression="payload.rfcCode"/>
	</int:header-enricher>
	
	<int:channel id="work-chan" datatype="gov.usgs.cida.ncetl.jpa.ArchiveConfig">
		<int:interceptors>
			<int:wire-tap channel="record-start-chan"/>
		</int:interceptors>
	</int:channel>
	
	<int:channel id="record-start-chan"/>
	<int:transformer id="start-notator" input-channel="record-start-chan"  output-channel="nullChannel"
		expression="payload.addHistory('start ' + payload.name)"
	/>
	
	<bean id="file-fetcher" class="gov.usgs.cida.ncetl.sis.FileFetcher"/>
	
	<!-- Uses ArchiveConfig to fetch list of files. ArchiveConfig is copied to header 'config' -->
	<int:transformer id="work-to-lof" input-channel="work-chan" output-channel="lof-chan"
		ref="file-fetcher"
	/>
	
	<int:channel id="lof-chan">
		<!-- List<File> -->
	</int:channel>
	
	<!--  check for case of no input found -->
	<int:router input-channel="lof-chan" expression="(payload.empty) ? 'EMPTY' : 'FULL' ">
    	<int:mapping value="EMPTY" channel="empty-lof-chan"/>
    	<int:mapping value="FULL" channel="nonempty-lof-chan"/>
	</int:router>
	
	<int:channel id="nonempty-lof-chan"/>
	
	<!-- splits list of files to one message per file, with headers year month rfc outputFile -->
	<!--  also sets aggregation headers, so must set apply-sequence=false to prevent override -->
	<int:splitter id="lof-splitter" input-channel="nonempty-lof-chan" output-channel="motherlode-chan"
		ref="file-fetcher"
		apply-sequence="false"
	/>
		
	<int:channel id="motherlode-chan" datatype="java.io.File"/>
		
	<bean id="message-store" class="org.springframework.integration.store.SimpleMessageStore"/>
	<bean id="reaper" class="org.springframework.integration.store.MessageGroupStoreReaper">
		<property name="messageGroupStore" ref="message-store"/>
		<property name="expireOnDestroy" value="false"/>
	</bean>
		
	<!--  assembles input files into list<file> according to aggregation headers -->
	<!--  only sends complete months -->
	<int:aggregator id="grib-agg" input-channel="motherlode-chan" output-channel="grib-chan" 
		expire-groups-upon-completion="true"
		send-partial-result-on-expiry="false"
		
		message-store="message-store"
	/>
	
	<!-- make this a queue so preceding steps don't have to wait for the CDF processing -->
	<int:channel id="grib-chan">
		<int:queue/>
	</int:channel>
	
	<bean id="gribber" class="gov.usgs.cida.data.grib.NetCDFArchiver"/>
		
	<!-- The workhorse that actually processes the data. -->
	<int:transformer id="grib-writer" input-channel="grib-chan" output-channel="choice-chan"
		ref="gribber" method="processFiles"
	>
		<int:poller trigger="oneshot">
			<int:transactional propagation="REQUIRES_NEW" transaction-manager="transactionManager"/>
		</int:poller>
	</int:transformer>
	
	<int:channel id="choice-chan"/>
	
	<int:payload-type-router id="choice-router" input-channel="choice-chan" default-output-channel="errorChannel">
		<int:mapping type="java.io.File" channel="ok-chan"/>
		<int:mapping type="gov.usgs.cida.data.grib.ArchiveException" channel="errorChannel"/>
	</int:payload-type-router>
	<int:channel id="ok-chan"/>
	
	<!-- Transformer rather than endpoint so we can forward to gather-chan for final aggregation  -->
	<int:transformer id="ok-notator" input-channel="ok-chan"  output-channel="gather-chan"
		expression="@errorRecorder.recordOutcome(headers.config, 'wrote ' + payload + ' for ' + headers.config.name)"
	/>
	
	<!--  record no-files outcome -->
	<int:channel id="empty-lof-chan"/>
	<int:transformer id="empty-notator" input-channel="empty-lof-chan" output-channel="nullChannel"
			expression="headers.config.addHistory('no input for ' + headers.config.name)"
	/>
	
	<!--  report on any error handling. -->
	<int:publish-subscribe-channel id="errorChannel"/>
	
	<bean id="errorRecorder" class="gov.usgs.cida.ncetl.sis.ErrorRecorder"/>
	<int:transformer id="error-notator" input-channel="errorChannel"  output-channel="nullChannel"
		ref="errorRecorder" method="recordError"
	/>
	
	<!-- Also log errors -->
	<int:logging-channel-adapter id="error-logger" channel="errorChannel" level="ERROR" logger-name="gov.usgs.cida.ncetl.SiS"></int:logging-channel-adapter>
	
	<int:channel id="gather-chan"/>
	
	<!--  And save errors in a queue so we can set the exit code to signal the invoker -->
	<int:bridge id="error-bridge" input-channel="errorChannel" output-channel="error-queue-chan"/>
	
	<int:channel id="error-queue-chan">
		<int:queue/>
	</int:channel>
	
	<int:aggregator id="gather-agg" input-channel="gather-chan" output-channel="finis"/>
	
	<int:channel id="finis">
		<int:queue/>
	</int:channel>
</beans>
